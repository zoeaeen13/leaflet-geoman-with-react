{"version":3,"sources":["constants/style.js","components/Map.js","Map.js","index.js"],"names":["MEDIA_QUERY_LG","Container","styled","section","MapWrapper","div","GeoWrapper","GetButton","button","ConfirmButton","Map","state","map","latlngs","errorMessage","copySuccess","initMap","startPoint","mapOptions","center","zoom","controlOptions","position","drawMarker","drawRectangle","drawCircle","drawCircleMarker","drawPolyline","cutPolygon","tileLayer","L","addTo","pm","addControls","addPolygonToMap","myMap","polygon","handleGeoJSON","drawLayers","getGeomanLayers","_layers","Object","keys","length","setState","forEach","value","key","_latlngs","recentLatlngs","JSON","parse","stringify","push","handleCopyPoint","navigator","clipboard","writeText","this","outputValue","id","onClick","readOnly","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+QACaA,EAAiB,4BCEjBC,EAAYC,IAAOC,QAAV,gMAOlBH,GAKSI,EAAaF,IAAOG,IAAV,iIAKnBL,GAMSM,EAAaJ,IAAOG,IAAV,4eAKnBL,EAmBEA,GAOOO,EAAYL,IAAOM,OAAV,8UAWlBR,GAaSS,EAAgBP,YAAOK,EAAPL,CAAH,0F,OCWXQ,E,4MAnFbC,MAAQ,CACNC,IAAK,KACLC,QAAS,KACTC,aAAc,iCACdC,YAAa,I,EAGfC,QAAU,WAA6C,IAA5CC,EAA2C,uDAA9B,CAAC,WAAY,aAC7BC,EAAa,CACjBC,OAAQF,EACRG,KAAM,IAEFC,EAAiB,CACrBC,SAAU,UACVC,YAAY,EACZC,eAAe,EACfC,YAAY,EACZC,kBAAkB,EAClBC,cAAc,EACdC,YAAY,GAERC,EAAY,qDAEdjB,EAAMkB,IAAElB,IAAI,MAAOM,GAGvB,OAFAY,IAAED,UAAUA,GAAWE,MAAMnB,GAC7BA,EAAIoB,GAAGC,YAAYZ,GACZT,G,EAGTsB,gBAAkB,SAACC,EAAOtB,GACRiB,IAAEM,QAAQvB,GAClBkB,MAAMI,I,EAGhBE,cAAgB,WACd,IAAMC,EAAa,EAAK3B,MAAMC,IAAIoB,GAAGO,iBAAgB,GAAMC,QAC3D,OAAQC,OAAOC,KAAKJ,GAAYK,QAC9B,KAAK,EACH,EAAKC,SAAS,CAAC9B,aAAc,mCAC7B,EAAK8B,SAAS,CAAC/B,QAAS,OACxB,MACF,KAAK,EACHgC,kBAAQP,GAAY,SAACQ,EAAOC,GAC1B,GAAID,EAAME,SAAU,CAClB,IAAIC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUN,EAAME,SAAS,KAC7DC,EAAcI,KAAKJ,EAAc,IACjC,EAAKL,SAAS,CAAC/B,QAASoC,QAG5B,MACF,QACE,EAAKL,SAAS,CAAC9B,aAAc,2DAC7B,EAAK8B,SAAS,CAAC/B,QAAS,S,EAI9ByC,gBAAkB,WACX,EAAK3C,MAAME,UAChB0C,UAAUC,UAAUC,UAAUP,KAAKE,UAAU,EAAKzC,MAAME,UACxD,EAAK+B,SAAS,CAAC7B,YAAa,Y,uDAG9B,WACE,IAAMH,EAAM8C,KAAK/C,MAAME,QAAS6C,KAAK1C,QAAQ0C,KAAK/C,MAAME,QAAQ,IAAI6C,KAAK1C,UACzE0C,KAAK/C,MAAME,SAAW6C,KAAKxB,gBAAgBtB,EAAK8C,KAAK/C,MAAME,SAC3D6C,KAAKd,SAAS,CAAChC,U,oBAGlB,WACG,IAAM+C,EAAcD,KAAK/C,MAAME,QAAQqC,KAAKE,UAAUM,KAAK/C,MAAME,QAAS,KAAM,GAAG6C,KAAK/C,MAAMG,aAC9F,OACE,eAACb,EAAD,WACE,cAACG,EAAD,CAAYwD,GAAG,QACb,eAACtD,EAAD,WACE,cAACC,EAAD,CAAWsD,QAASH,KAAKrB,cAAzB,sCACA,0BAAUS,MAAOa,EAAaG,UAAQ,IACtC,cAACrD,EAAD,CAAeoD,QAASH,KAAKJ,gBAA7B,SAA+CI,KAAK/C,MAAMI,YAAY4B,OAAQe,KAAK/C,MAAMI,YAAa,uC,GA7EhGgD,IAAMC,WCHxBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c762bba2.chunk.js","sourcesContent":["export const MEDIA_QUERY_MD = \"@media (max-width: 576px)\";\r\nexport const MEDIA_QUERY_LG = \"@media (max-width: 768px)\";","import styled from 'styled-components';\r\nimport { MEDIA_QUERY_LG } from '../constants/style'\r\n\r\nexport const Container = styled.section`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  justigy-content: space-between;\r\n  align-items: center;\r\n\r\n  ${MEDIA_QUERY_LG} {\r\n    flex-direction: column-reverse;\r\n  }\r\n`;\r\n\r\nexport const MapWrapper = styled.div`\r\n  width: 70%;\r\n  height: 95%;\r\n  margin: 0 10px;\r\n\r\n  ${MEDIA_QUERY_LG} {\r\n    width: 100%;\r\n    height: 80%;\r\n  }\r\n`;\r\n\r\nexport const GeoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  ${MEDIA_QUERY_LG} {\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    flex-direction: row;\r\n    width: 100%;\r\n  }\r\n\r\n  textarea {\r\n    width: 25vw;\r\n    height: 70vh;\r\n    border: 2px solid #eeeeee;\r\n    border-radius: 4px;\r\n    padding: 10px;\r\n    word-wrap:break-word;\r\n  \r\n    &:focus {\r\n      outline: none;\r\n    }\r\n\r\n    ${MEDIA_QUERY_LG} {\r\n      width: 50%;\r\n      height: 20%;\r\n    }\r\n  }\r\n`\r\n\r\nexport const GetButton = styled.button`\r\n  margin: 10px;\r\n  border: none;\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  background: #bae0c2;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  transition: .2s ease-in all;\r\n\r\n  ${MEDIA_QUERY_LG} {\r\n    margin: 5px;\r\n  }\r\n\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  &:hover {\r\n    background: #9dd3a8;\r\n  }\r\n`\r\n\r\nexport const ConfirmButton = styled(GetButton)`\r\nbackground: #E89898;\r\n\r\n&:hover {\r\n  background: #D74B4B;\r\n}\r\n`","import React from 'react';\nimport L from 'leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport '@geoman-io/leaflet-geoman-free';  \nimport '@geoman-io/leaflet-geoman-free/dist/leaflet-geoman.css';\nimport { forEach } from 'lodash';\nimport { Container, MapWrapper, GeoWrapper, GetButton, ConfirmButton} from './components/Map';\n\nclass Map extends React.Component {\n  state = {\n    map: null,\n    latlngs: null,\n    errorMessage: '請圈選區域',\n    copySuccess: '',\n  }\n\n  initMap = (startPoint = [25.0475613, 121.5173399]) => {\n    const mapOptions = {\n      center: startPoint,\n      zoom: 16\n    }\n    const controlOptions = {  \n      position: 'topleft',\n      drawMarker: false,\n      drawRectangle: false,\n      drawCircle: false,\n      drawCircleMarker: false,\n      drawPolyline: false,\n      cutPolygon: false,\n    };\n    const tileLayer = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    let map = L.map('map', mapOptions);\n    L.tileLayer(tileLayer).addTo(map);\n    map.pm.addControls(controlOptions);\n    return map;\n  }\n\n  addPolygonToMap = (myMap, latlngs) => {\n    const polygon = L.polygon(latlngs)\n    polygon.addTo(myMap);\n  }\n\n  handleGeoJSON = () => {\n    const drawLayers = this.state.map.pm.getGeomanLayers(true)._layers\n    switch (Object.keys(drawLayers).length) {\n      case 0:\n        this.setState({errorMessage: '請圈選區域'})\n        this.setState({latlngs: null})\n        break;\n      case 1:\n        forEach(drawLayers, (value, key) => {\n          if (value._latlngs) {\n            let recentLatlngs = JSON.parse(JSON.stringify(value._latlngs[0]))\n            recentLatlngs.push(recentLatlngs[0])\n            this.setState({latlngs: recentLatlngs})\n          }\n        })\n        break;\n      default:\n        this.setState({errorMessage: '只能選擇一個區域！'})\n        this.setState({latlngs: null})\n    }\n  }\n\n  handleCopyPoint = () => {\n    if (!this.state.latlngs) return\n    navigator.clipboard.writeText(JSON.stringify(this.state.latlngs));\n    this.setState({copySuccess: 'Copy!'})\n  }\n\n  componentDidMount() {\n    const map = this.state.latlngs? this.initMap(this.state.latlngs[0]):this.initMap();\n    this.state.latlngs && this.addPolygonToMap(map, this.state.latlngs);\n    this.setState({map})\n  }\n\n\trender() {\n    const outputValue = this.state.latlngs?JSON.stringify(this.state.latlngs, null, 2):this.state.errorMessage;\n    return (\n      <Container>\n        <MapWrapper id=\"map\"/>\n          <GeoWrapper>\n            <GetButton onClick={this.handleGeoJSON}>獲取座標</GetButton>\n            <textarea value={outputValue} readOnly/>\n            <ConfirmButton onClick={this.handleCopyPoint}>{this.state.copySuccess.length? this.state.copySuccess: '複製座標'}</ConfirmButton>\n          </GeoWrapper>\n      </Container>\n    );\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from './Map';\n\nReactDOM.render(\n    <Map />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}